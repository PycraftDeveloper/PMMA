from typing import Iterable, Union

import numpy as np
import numpy.typing as npt

Numerical1D = Union[
    npt.NDArray[np.float_],
    npt.NDArray[np.int_],
    Iterable[float],
    Iterable[int],
]

Float1D = Union[npt.NDArray[np.float32], Iterable[float]]

Numerical = Union[float, int]

def IndividualPythagoreanDifference(x1: Numerical, y1: Numerical, x2: Numerical, y2: Numerical) -> float: ...

def PointPythagoreanDifference(point1: Numerical1D, point2: Numerical1D) -> float: ...

def IndividualPythagoreanDistance(x: Numerical, y: Numerical) -> float: ...

def PointPythagoreanDistance(point: Numerical1D) -> float: ...

def SmoothStep(value: Numerical) -> float: ...

def Ranger(value: Numerical, old_range: Numerical1D, new_range: Numerical1D) -> float: ...

def ArrayRanger(values: Numerical1D, old_range: Numerical1D, new_range: Numerical1D) -> Float1D: ...

def ArrayNormalize(values: Numerical) -> Float1D: ...

def Cross(first_values: Numerical1D, second_values: Numerical1D) -> Float1D: ...

def Subtract(first_values: Numerical1D, second_values: Numerical1D) -> Float1D: ...

def Dot(first_values: Numerical1D, second_values: Numerical1D) -> float: ...

def LookAt(eye: Numerical1D, target: Numerical1D, up: Numerical1D) -> Float1D: ...

def ComputePosition(position: Numerical1D, target: Numerical1D, up: Numerical1D) -> Float1D: ...

def PerspectiveFOV(FOV: Numerical, aspect_ratio: Numerical, near_plane: Numerical, far_plane: Numerical) -> Float1D: ...