from typing import Iterable, Union, Any

import numpy as np
import numpy.typing as npt

Integer1D = Union[
    npt.NDArray[np.int32], # preferred
    npt.NDArray[np.int8],
    npt.NDArray[np.int16],
    npt.NDArray[np.int64],
    Iterable[int],
]

Float1D = Union[
    npt.NDArray[np.float32], # preferred
    npt.NDArray[np.float16],
    npt.NDArray[np.float64],
    Iterable[float]]

Numerical = Union[float, int]

NoneInt = Union[int, None]

class Color:
    def __init__(self, seed: NoneInt=None, octaves: int=2, lacunarity: float=0.75, gain: float=1.0) -> None: ...

    def get_seed(self) -> int: ...
    def get_octaves(self) -> int: ...
    def get_lacunarity(self) -> Numerical: ...
    def get_gain(self) -> Numerical: ...

    def get_color_set(self) -> bool: ...

    def generate_random_color(self) -> None: ...
    def generate_color_from_perlin_noise(self, in_value: Numerical) -> None: ...
    def generate_color_from_fractal_brownian_motion(self, in_value: Numerical) -> None: ...

    def set_color_RGBA(self, in_color: Integer1D) -> None: ...
    def set_color_small_rgba(self, in_color: Float1D) -> None: ...
    def set_color_RGB(self, in_color: Integer1D) -> None: ...
    def set_color_small_rgb(self, in_color: Float1D) -> None: ...

    def get_color_RGBA(self, detect_format: bool=True) -> Integer1D: ...
    def get_color_small_rgba(self, detect_format: bool=True) -> Float1D: ...
    def get_color_RGB(self, detect_format: bool=True) -> Integer1D: ...
    def get_color_small_rgb(self, detect_format: bool=True) -> Float1D: ...

class DisplayCoordinate:
    def __init__(self) -> None: ...

    def configure(self, seed: NoneInt=None, octaves: int=2, lacunarity: float=0.75, gain: float=1.0) -> None: ...

    def get_seed(self) -> int: ...
    def get_octaves(self) -> int: ...
    def get_lacunarity(self) -> Numerical: ...
    def get_gain(self) -> Numerical: ...
    def get_color_set(self) -> bool: ...

    def generate_random_display_coordinate(self) -> None: ...
    def generate_display_coordinate_from_perlin_noise(self, in_value: Numerical) -> None: ...
    def generate_display_coordinate_from_fractal_brownian_motion(self, in_value: Numerical) -> None: ...

    def set_display_coordinate(self, in_color: Integer1D) -> None: ...
    def get_display_coordinate(self, detect_format: bool=True) -> Float1D: ...

class Angle:
    def __init__(self, seed: NoneInt=None, octaves: int=2, lacunarity: float=0.75, gain: float=1.0) -> None: ...

    def get_seed(self) -> int: ...
    def get_octaves(self) -> int: ...
    def get_lacunarity(self) -> Numerical: ...
    def get_gain(self) -> Numerical: ...
    def get_angle_set(self) -> bool: ...

    def generate_random_color(self) -> None: ...
    def generate_color_from_perlin_noise(self, in_value: Numerical) -> None: ...
    def generate_color_from_fractal_brownian_motion(self, in_value: Numerical) -> None: ...

    def set_angle_degrees(self, value: Numerical) -> None: ...
    def set_angle_radians(self, value: Numerical) -> None: ...

    def get_angle_degrees(self) -> Numerical: ...
    def get_angle_radians(self) -> Numerical: ...

class Proportion:
    def __init__(self, seed: NoneInt=None, octaves: int=2, lacunarity: float=0.75, gain: float=1.0) -> None: ...

    def get_seed(self) -> int: ...
    def get_octaves(self) -> int: ...
    def get_lacunarity(self) -> Numerical: ...
    def get_gain(self) -> Numerical: ...
    def get_proportion_set(self) -> bool: ...

    def generate_random_color(self) -> None: ...
    def generate_color_from_perlin_noise(self, in_value: Numerical) -> None: ...
    def generate_color_from_fractal_brownian_motion(self, in_value: Numerical) -> None: ...

    def set_proportion_percentage(self, value: Numerical) -> None: ...
    def set_proportion_decimal(self, value: Numerical) -> None: ...

    def get_proportion_percentage(self) -> Numerical: ...
    def get_proportion_decimal(self) -> Numerical: ...


class LinkedProportion(Proportion):
    def __init__(self, linked_class: Any, attr_name: str, seed: NoneInt=None, octaves: int=2, lacunarity: float=0.75, gain: float=1.0) -> None: ...