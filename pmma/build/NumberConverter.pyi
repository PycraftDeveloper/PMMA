from typing import Iterable, Union

import numpy as np
import numpy.typing as npt

Int1D = Union[
    npt.NDArray[np.int_],
    Iterable[int],
]

Float1D = Union[npt.NDArray[np.float32], Iterable[float]]

Numerical = Union[float, int]

class ColorConverter:
    def set_color_RGBA(self, in_color: Int1D) -> None: ...

    def set_color_small_rgba(self, in_color: Float1D) -> None: ...

    def set_color_RGB(self, in_color: Int1D) -> None: ...

    def set_color_small_rgb(self, in_color: Float1D) -> None: ...

    def get_color_RGBA(self) -> Int1D: ...

    def get_color_small_rgba(self) -> Float1D: ...

    def get_color_RGB(self) -> Int1D: ...

    def get_color_small_rgb(self) -> Float1D: ...

class DisplayCoordinatesConverter:
    def set_coordinates_pixel(self, in_coordinates: Int1D) -> None: ...

    def set_coordinates_normalized(self, in_coordinates: Float1D) -> None: ...

    def get_coordinates_pixel(self) -> Int1D: ...

    def get_coordinates_normalized(self) -> Float1D: ...

class AngleConverter:
    def set_angle_degrees(self, value: Numerical) -> None: ...

    def set_angle_radians(self, value: Numerical) -> None: ...

    def get_angle_degrees(self) -> Numerical: ...

    def get_angle_radians(self) -> Numerical: ...

class DisplayScalarConverter:
    def set_scalar_pixel(self, value: int) -> None: ...

    def set_scalar_normalized(self, value: Numerical) -> None: ...

    def get_scalar_pixel(self) -> int: ...

    def get_scalar_normalized(self) -> Numerical: ...