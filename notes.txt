Notes
-----
Add typehint for returned classes at least where unclear (for intellicode) - eg:

...
    def get_controller(self, controller_index) -> 'Controller':
        return Registry.pmma_module_spine[Constants.CONTROLLER_INTERMEDIARY_OBJECT].get_controller(controller_index)
...

Module Initialization Order
---------------------------

Built in (standard library)

External (pip)

Internal Core (registry, error_utils, constants)

Internal (pmma.py_src./)

Internal Utility (pmma.py_src.utility./)

*ONLY import required modules.

Search
======
Search for public attributes of a class: self.([A-Z]|[a-z])+

Issues
======
Crashes on display full screen toggle (and maybe resize) due to opengl context / window context. Release all OpenGL objects and recreate them? Link to custom moderngl wrapper. Partially fixed - colors not however (and manually setting color has no effect either). Creating custom objects is a must!
Transparent display not working with opengl idk why.

I have been building OpenGL objects. Anything that used the old system will be broken now and fixed shortly. Also, make sure to add opengl objects to central location and recreate them when display destroyed and recreated to address issues with opengl. Use Recreate for that!

TO DO LIST
==========
Add in Coordinate intermediaries for render pipeline
Work on MIDI events when able to do so.

Integrate events with custom event manager
Create aggregated events like Pointer (similar to controller already added).

Introduce prefix adjustments for SI-units.
Introduce Coordinate and Degree conversions.
Introduce anti-aliasing, improve VBO creation and allow easier loading of other moderngl objects.
Add object collision.                                                                   ^
Work on render pipeline.                                                                |
                                                                                        |
Wrap ModernGL & ModernGL_window objects through PMMA to enhance existing behavior, including deletes.