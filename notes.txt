Notes
-----
Add typehint for returned classes at least where unclear (for intellicode) - eg:

...
    def get_controller(self, controller_index) -> 'Controller':
        return _Registry.pmma_module_spine[Constants.CONTROLLER_INTERMEDIARY_OBJECT].get_controller(controller_index)
...

When adjusting the number of segments in circular shapes, or shapes with varying numbers of points, make sure to also update color data too!

Module Initialization Order
---------------------------

Built in (standard library)

External (pip)

Internal Core (registry, error_utils, constants)

Internal (pmma.py_src./)

Internal Utility (pmma.py_src.utility./)

*ONLY import required modules.

Search
======
Search for public attributes of a class: self.([A-Z]|[a-z])+

Issues
======
Transparent display not working with opengl, potentially signs of a bigger problem.
Potential issue in draw.py with approximated solution for height - need to test its purpose.

TO DO LIST
==========
Work on MIDI events when able to do so.

Integrate events with custom event manager
Create aggregated events like Pointer (similar to controller already added).

Introduce prefix adjustments for SI-units. **
Introduce Degree conversions. (Angle converter (degrees, gradians, radians)) **
Add object collision.
Work on render pipeline.

**ALSO, ADJUST SHAPE INDEXES**

TEMPORARY TO DO LIST
====================
Finish defining other shapes
Create shapes like circle from RadialPolygon
Create shapes like lines from Polygon (with closed=False)
Update shapes when aspect ratio changes
add custom logging duration
logging customize aggregation behavior (separate or combined)
Update render pipeline

IMPROVEMENTS
============
Auto detect use of 'glpointsize' in shader and enable custom point sizes only when required in OpenGL (VAO, render)